
import csv
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import asyncio

API_TOKEN = '7242273434:AAFiwplTnqrE9No0cXgwDxBUVu-9yhgdjko'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
QUESTIONS_FILE = 'questions.csv'

# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
categories = [
    "–ù–∞—É–∫–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ú—É–∑—ã–∫–∞"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
questions_by_category = {category: [] for category in categories}
user_answers = {}
message_ids = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
selected_category = None

def load_questions():
    global questions_by_category
    for category in categories:
        questions_by_category[category] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        with open(QUESTIONS_FILE, mode='r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['category'] == category:
                    question = {
                        'question': row['question'],
                        'options': [row['option1'], row['option2'], row['option3'], row['option4']],
                        'correct': row['correct_option']
                    }
                    questions_by_category[category].append(question)

@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category, callback_data=f'category_{category}')] for category in categories
    ])

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('category_'))
async def choose_category(callback_query: types.CallbackQuery):
    global selected_category
    selected_category = callback_query.data.split('_')[1]
    load_questions()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    user_id = callback_query.from_user.id

    # –û—Å—Ç–∞–≤–ª—è–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    user_answers[user_id] = {
        'answers': [],
        'current_question_index': 0,
        'questions': random.sample(questions_by_category[selected_category], min(5, len(questions_by_category[selected_category])))
    }

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {selected_category}. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

    if user_answers[user_id]['questions']:
        await send_question(callback_query.message, user_id)
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")

async def send_question(message: types.Message, user_id):
    current_question_index = user_answers[user_id]['current_question_index']
    question = user_answers[user_id]['questions'][current_question_index]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option, callback_data=f"option_{i}")] for i, option in enumerate(question['options'])
    ])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = await message.answer(question['question'], reply_markup=keyboard)
    if user_id not in message_ids:
        message_ids[user_id] = []
    message_ids[user_id].append(message_id.message_id)

@dp.callback_query(lambda c: c.data.startswith('option_'))
async def process_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    selected_answer_index = int(callback_query.data.split('_')[1])
    current_question_index = user_answers[user_id]['current_question_index']
    question = user_answers[user_id]['questions'][current_question_index]

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    selected_answer = question['options'][selected_answer_index]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[user_id]['answers'].append({
        'question': question['question'],
        'answer': selected_answer,
        'correct': question['correct']
    })

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    user_answers[user_id]['current_question_index'] += 1
    if user_answers[user_id]['current_question_index'] < len(user_answers[user_id]['questions']):
        await send_question(callback_query.message, user_id)
    else:
        await show_results(callback_query.message, user_id)

async def show_results(message: types.Message, user_id: int):
    results = user_answers[user_id]['answers']

    if not results:
        await message.answer("–ò—Ç–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    result_text = "üìä *–ò—Ç–æ–≥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:*\n\n"
    for result in results:
        if result['answer'] == result['correct']:
            result_text += f"‚úÖ *–í–æ–ø—Ä–æ—Å:* {result['question']}\n"
            result_text += f"–í–∞—à –æ—Ç–≤–µ—Ç: {result['answer']}\n\n"
        else:
            result_text += f"‚ùå *–í–æ–ø—Ä–æ—Å:* {result['question']}\n"
            result_text += f"–í–∞—à –æ—Ç–≤–µ—Ç: {result['answer']}\n"
            result_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result['correct']}\n\n"

    # –ö–Ω–æ–ø–∫–∞ "–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data='play_again')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    result_message = await message.answer(result_text, parse_mode="Markdown", reply_markup=keyboard)
    if user_id not in message_ids:
        message_ids[user_id] = []
    message_ids[user_id].append(result_message.message_id)

@dp.callback_query(lambda c: c.data == 'play_again')
async def play_again(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Ç–æ–≥–∞–º–∏
    if user_id in message_ids:
        for message_id in message_ids[user_id]:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                print(f"Failed to delete message {message_id}: {e}")
        message_ids[user_id] = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category, callback_data=f'category_{category}')] for category in categories
    ])

    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=keyboard)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
